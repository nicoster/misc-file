IWE
Cisco Sites
Emergencies
  
  
 Cisco Patents On-Line Idea Details (#981408)

Main menuReportsFindContactHelp

Edit Print ViewWatch Patent DetailsReviewTag
Method for detecting Desktop-Share update region
CPOL No.:	981408
Status:	 Draft
Submitted:	30-Jul-2012
Modified:	09-Oct-2012
Idea Details
The contents of this submission and any additions or modifications thereto constitute Cisco confidential information and may be a privileged communication to or from one or more attorneys and/or supporting personnel for purposes of obtaining or facilitating legal advice and/or legal services.
Inventors:

Harold Huang (haihuhua)	Phone:+86 512 8777 4119	Manager:Rain Zhao	Dept:WebEx - Platform Eng - Suzhou 500.505.5050
Type:Regular	Division:CTG	Site:	Info:Cisco Directory
Nick Xiao (nixiao)	Phone:+86 512 8777 4193	Manager:Rain Zhao	Dept:WebEx - Platform Eng - Suzhou 500.505.5050
Type:Regular	Division:CTG	Site:	Info:Cisco Directory
Sea Sun (sesun)	Phone:+86 512 8777 4216	Manager:Roger Zhao	Dept:WebEx - Client Apps - Suzhou 500.505.5090
Type:Regular	Division:CTG	Site:	Info:Cisco Directory
Sunny Zhang (yaqizhan)	Phone:+86 512 8777 4143	Manager:David Ye	Dept:WebEx - Platform Eng - Suzhou 500.505.5050
Type:Contingent Worker	Division:CTG	Site:	Info:Cisco Directory
Problem to Solve:To share desktop, there are many solutions. One solution is following these steps.
1. Capture screen with a timer in host side
2. Image process to judge whether region is updated
3. Send the updated-region to attendee side


About step1 capturing screen, current solution is to capture all screen and send it to the next process. If screen is too big, that means it need to transfer more data, that causes
1. Increase the image process time, decrease the performance
2. If the data is transfered to server, it wastes more network bandwidth.
3. To avoid network bandwidth issue, the step1 capture-timer often need to set large to avoid server heavy-load. But this affects the real-time response user experience of desktop-share. 
Possible Prior Art:For the solution described in the "Problem to solve", the usual way is to use API in the specific OS to capture full-screen image and send it.
But this will cause the 3 drawbacks written in "Problem to solve".

The other solution is from video-card driver level to capture every system-draw cmd, then to execute the same one in other side. 
Our invention is different from this. The points are
1. Capture the message from OS level, not from driver
2. Only focus on the update-region, not about the update content.
Detailed Description:1. In most OS, generally, it drives with message-mechanism and windows management. The below image demonstrates the process, all kinds of events come from external, windows constructs the message queue to collect it and create some system-defined internal messages, such as PAINT screen. Application can handle all these messages.


2. In those messages, one is responsible for rendering the screen. For example, in Microsoft Windows, that's WM_PAINT. When triggered, the message's parameter provides the invalidate rectangle. Monitor application collects the rectangles together during a timer, then sectional digging out the part of image, this will decrease the transfered image size and data capacity.

3. In most OS, it provides Hook solution to control or handle other applications' messages.  Through this, the invention can capture kind of WM_PAINT from all applications.

The below image explain the 2nd & 3rd points.






4. Now the CPU has evolved to 64 bits. In 64 bits OS, 32 bits / 64 bits application can also run in this. But Hook mechanism also supports capture messages in the same bits type application. To consider this point, the invention builds two applications(32/64 bits) to handle corresponding type application. Then to collect the rectangles from both, with the next step as point 2, even in 64 bits OS, the invention can work fine.


5. In the demo(see in the "Working Model" ), there is an application to demo and verify the idea. 
Usage: Execute the "Release\ViewPaint.exe" in the Windows platform, choose the "File->Hook" menu, then it will hook the update-rectangle and draw it on the screen.
Notes: This application is only build win32 version. Using the attachment code, it's convenient to  build 64 bits one.

The below image is the demo UI. The blank white-region presents the desktop region. When any rects update, the region will be draw in the UI.



Restatement:The invention provides a solution to capture desktop update-region through hooking the message. With this, in one of current DS(desktop share) solution, it can decrease the image size in the startup step, this will improve the next steps performance. 
Advantages:Through this invention, in the desktop share, decreases the area region in capture-image. This improves the image process performance with this first-stage filter. With this, it also decrease the network width consume. The final result is to raise user experience in real-time response.
Cisco Use:Could be Used in Cisco Product
---
Working Model:A Working Model has been made. Details regarding the the date the model was made, the location of the model and any other information the inventors wanted to convey:Attachment is a prototype to verify the feasibility of the invention. It's only the 32 bit application. It draws the update region in the screen after starting the capturing process.

Here is the download link:
http://wikicentral.cisco.com/download/attachments/204833527/ViewPaint.rar?version=1&modificationDate=1349771995859

Industry Use:Description of possible uses of the technology by others in the industry:This can be used in Cisco desktop share application, at least in WebEx desktop share version.
Public Use:This invention has not been disclosed publicly.
Description of future plans to use or disclose this invention publicly:Current not
Government Use:This invention is not related to or derived from a government project.
---
Detecting Use:Detectable with Some Effort.In a desktop-sharing like application, the usage could be detected this way, take Windows for example:
If the application calls the SetWindowsHookEx(WH_CALLWNDPROC, CallWndProc, hInst, 0); 
and checks the message of WM_PAINT and gets the updating rectangle by calling GetUpdateRect() in the CallWndProc, then it could be concluded that the application is using the same technology described in this invention.

All this checking could be performed by using some sort of reverse engineering tools, like WinDbg on Windows.
Standards:This invention is not necessary to implement a standard.
Description of standards to which the invention may be related:
---
Export Control:This invention does not fall under Export Control.
---
Category:
Applications and Devices > Telephony and Unified Communications > Real-time communication
Applications and Devices
Tags: Desktop share update region
Portfolio: Draft
PDDs:---
Supporting Documents:---
Documents:

Type	Document	Size
No Documents Exist.

Notes:
---
Review Information
All notes, comments and other information herein constitute Cisco confidential information and may be privileged communications to or from one or more attorneys and/or supporting personnel for purposes of obtaining or facilitating legal advice and/or legal services.
Retract Idea:Please read about Retracting your Idea. (to retract this idea click the button below)



Main menuReportsFindContactHelp
Owners/Maintainers: Cisco Patent Team     CISCO CONFIDENTIAL: A printed version of this page is an uncontrolled document.
This page was dynamically generated on Wed, Oct 10 2012, 6:31:49 am by user nixiao in 1.027 secs.